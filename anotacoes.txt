criar banco de dados

configurar .env

aterar timezone em config/app.php - America/Sao_Paulo

criar model e migration de categorias

criar controller de categorias "Api\\CategoryController" no modelo --api

criar as rotas dentro de routes/api.php. Essas rotas tem o prefixo 'api'

aula 6 - filtragem
    a função de filtragem pode ser feita na model e chamada no controller

aula 9 - validação com form request
    foi criado o request CategoryRequest
    foi trocado o Request por CategoryRequest no cadastro e edição
    é necessário inserir headers na requisição no postman/hoppscotch, senão, ele só redireciona e não mostra a validação:
    
    Content-Type: Application/json,
    X-Requested-With: XMLHttpRequest

aula 15 - FACTORY PRODUTOS API LARAVEL
    foi feito um seeder pra usuários:
    php artisan make:seeder UsersTableSeeder

    Dá pra rdar um seeder específico chamando: php artisan db:seed --class=NomeDoSeeder

aula 25 - configuração para upload de arquivos
    em app/config/filesystem.php existe o array 'disks' com uma lista onde tem o 'public', que nesse caso é o ideal.
    Então no array 'default', foi trocado o 'local' par 'public'.
    depois é necessário criar um link simbólico com 'php artisan storage:link' para criar uma espécie de atalho entre a pasta storage/app/public e a public

Aula 26 - Edição de imagem no update
    IMPORTANTE - ao alterar, é preciso fazer a requisição do tipo POST pra aceitar a alteração de arquivo e aí manda um request assim: _method : 'PUT'

Aula 29 - listar produtos por categoria
    exemplo de rota:
        Route::get('categories/{id}/products', [CategoryController::class, 'metodo']);

Aula 31 - versionamento de api
    Foi refeita a estrutura para denominar na versão 1('v1'):
    os controllers foram movidos para uma pasta vhamada 'v1' e em seus namespaces foram adicionados 'v1\'
    api.php - as rotas feitas até aqui foram colocadas em um grupo de prefixo 'v1' e nas chamadas dos controllers foram adicionados os 'v1'
    nas chamadas das requisições(no postman/hoppscotch, por exemplo), foi adicionado o 'v1' depois do 'api/'

aula 33 - limite de requisições na api
    em App\Http\Kernel.php há o array api, onde se define o nº de requisições e o tempo de bloqueio: 60,1

aula 34 - tratamento de exceções
    em app/Exceptions/Handler.php: precisa ver como faz no laravel 8

aula 35 - tratamento de exceções ajax
    dentro da verificação da excessão no arquivo citado acima:
    if($exception instanceof classeDaExcecao){
        if($request->expectsJson()){   ----> é isso

        }
    }

aula 37 - liberar cors no laravel
    instalar o pacote spatie/laravel-cors: github.com/spatie/laravel-cors#laravel
        composer require spatie/laravel-cors

    em kernel.php, no array 'api', adicione \Spatie\Cors\Cors::class
    pra gerar oo arquivo de configuração config/cors.php, rode no terminal: php artisan vendor:publish --provider="Spatie\Cors\CorsServiceProvider" --tag="config"

aula 38 - traduzindo a api 
    clone o repo https://github.com/Laravel-Lang/lang
    dentro de locales, pegue a pasta da lingua desejada e mova/copie para resource/lang
    em config/app.php, na chave do array chamada 'locale' e na 'fallback_locale', ponha o nome da pasta que vc colou lá no lang